import org.apache.tools.ant.filters.ReplaceTokens

import java.time.ZonedDateTime

buildscript {
    ext {
        rootPack = 'com.poc.bem.demo'
        springBootVersion = '2.3.6.RELEASE'
        logbackVersion = '1.2.3'
        swaggerVersion = '3.0.0'
        junitVersion = '5.6.0'
        lombokVersion = '1.18.14'
    }
    tasks.withType(JavaCompile) {
        options.encoding("UTF-8")
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0")
        classpath("org.owasp:dependency-check-gradle:6.0.3")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4+")
    }
}

plugins {
    id 'org.owasp.dependencycheck' version '6.0.3'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.jfrog.artifactory'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

group = 'com.poc.bem'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

String majorVersion = "$artifactMajorVersion"
String buildNumber = "$artifactBuildNumber"
majorVersion = System.getProperty("artifactMajorVersion", majorVersion)
buildNumber = System.getProperty("artifactBuildNumber", buildNumber)
String branch = System.getProperty("sourceBranch")

if (System.getProperty("isRelease", "N").equalsIgnoreCase("N")) {
    version = "$majorVersion" + "-SNAPSHOT"
} else {
    version = "$majorVersion"."$buildNumber"
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    maven {
        url "${artifactory_url}/jcenter"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

bootRun {
    String serverPort = System.getenv('SERVER_PORT')
    String environment = System.getenv('ENV')
    String logbackAppender = System.getenv('LOGBACK_APPENDER')
    String keyStorePw = System.getenv('KEYSTORE_PW')
    def appConfig = System.getProperty('app.config', "$projectDir/tmp/config")

    def logsDir = System.getProperty('logFilePath', "$projectDir/logs")
    File logsFolder = new File(logsDir)
    if (!logsFolder.exists()) {
        logsFolder.mkdirs()
    }

    File appConfigFolder = new File(appConfig)
    if (!logsFolder.exists()) {
        appConfigFolder.mkdirs()
    }

    jvmArgs = [
            "-Djava --add-opens java.base/java.lang=ALL-UNNAMED",
            "-Denvironment=$environment",
            "-Dlogging.config=classpath:logback-spring.xml",
            "-DlogFilePath=$logsDir",
            "-Dapp.config=$appConfig",
            "-Dserver.port=$serverPort",
            "-Dlogback.appender=$logbackAppender",
            "-Dhttp.proxyHost=http://localhost/",
            "-Dhttps.proxyHost=http://localhost/",
            "-Dhttp.proxyPort=8080",
            "-Dhttps.proxyPort=8080",
            "-Djavax.net.ssl.trustStore=$projectDir/security/api_truststore.jks",
            "-Djavax.net.ssl.keyStore=$projectDir/security/api_keystore.jks",
            "-Djavax.net.ssl.trustStorePassword=$keyStorePw",
            "-Djavax.net.ssl.KeyStorePassword=$keyStorePw"
    ]
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.retry:spring-retry:1.3.0'

    implementation "ch.qos.logback:logback-core:$logbackVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-access:$logbackVersion"

    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation "io.springfox:springfox-swagger2:$swaggerVersion"
    implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    runtimeOnly 'com.h2database:h2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'org.junit.jupiter', module: 'junit-jupiter-engine'
    }

    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.0'

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"

    // Additional dependencies to run Junit5 Tests in Intellij IDE
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.6.0"
    testRuntimeOnly 'org.junit.platform:junit-platform-engine:1.6.0'
}

processResources {
    filter ReplaceTokens, tokens: [
            "application.version"       : version.toString(),
            "application.buildTimestamp": getDate(),
            "application.branch"        : branch.toString(),
    ]
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "$rootPack/aop/*",
                    "$rootPack/constants/*",
                    "$rootPack/utils/PatternMaskingLayout.class"
            ])
        })
    }
}

dependencyCheck {
    format = 'ALL'
}

task incrementVersion {
    try {
        if (System.getProperty("isRelease", "N").equalsIgnoreCase("Y")) {
            Properties props = new Properties()
            File file = new File("gradle.properties")
            props.load(file.newDataInputStream())
            Integer nextBuildNum = (((props.getProperty('artifactBuildNumber')) as BigDecimal) + 1)
            props.setProperty('artifactBuildNumber', nextBuildNum.toString())
            props.store(file.newWriter(), null)
            props.load(file.newDataInputStream())
        }
    } catch (Exception e) {
        println "Error occurred while incrementing the version ${e.getMessage()}"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            snapshotRepository(url: "${artifactory_url}/libs-snapshot-local") {
                authentication(userName: artifactory_user, password: artifactory_password)
            }
            repository(url: "${artifactory_url}/libs-release-local") {
                authentication(userName: artifactory_user, password: artifactory_password)
            }
        }
    }
}

tasks['test'].finalizedBy(jacocoTestReport)

static String getDate() {
    return ZonedDateTime.now().format("MM-dd-yyyy HH:mm:ss")
}
